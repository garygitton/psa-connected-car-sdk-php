<?php
/**
 * InlineResponse20012
 *
 * PHP version 5
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Connected Car Development
 *
 * This is the first release of our connected car API. With this API you can access more than 89 signals in a car. This API is available on Peugeot, CitroÃ«n and DS cars.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: connectedcar@mpsa.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Psa\ConnectedCar\Model;

use \ArrayAccess;
use \Psa\ConnectedCar\ObjectSerializer;

/**
 * InlineResponse20012 Class Doc Comment
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20012 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_12';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fogFront' => '\Psa\ConnectedCar\Model\RunninglightstatuslistFogFront',
        'fogRear' => '\Psa\ConnectedCar\Model\RunninglightstatuslistFogFront',
        'turnRight' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'turnLeft' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'brakeLight' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'vin' => 'string',
        'lastUpdate' => 'string',
        'contract' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fogFront' => null,
        'fogRear' => null,
        'turnRight' => null,
        'turnLeft' => null,
        'brakeLight' => null,
        'vin' => null,
        'lastUpdate' => null,
        'contract' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fogFront' => 'fogFront',
        'fogRear' => 'fogRear',
        'turnRight' => 'turnRight',
        'turnLeft' => 'turnLeft',
        'brakeLight' => 'brakeLight',
        'vin' => 'vin',
        'lastUpdate' => 'lastUpdate',
        'contract' => 'contract'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fogFront' => 'setFogFront',
        'fogRear' => 'setFogRear',
        'turnRight' => 'setTurnRight',
        'turnLeft' => 'setTurnLeft',
        'brakeLight' => 'setBrakeLight',
        'vin' => 'setVin',
        'lastUpdate' => 'setLastUpdate',
        'contract' => 'setContract'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fogFront' => 'getFogFront',
        'fogRear' => 'getFogRear',
        'turnRight' => 'getTurnRight',
        'turnLeft' => 'getTurnLeft',
        'brakeLight' => 'getBrakeLight',
        'vin' => 'getVin',
        'lastUpdate' => 'getLastUpdate',
        'contract' => 'getContract'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fogFront'] = isset($data['fogFront']) ? $data['fogFront'] : null;
        $this->container['fogRear'] = isset($data['fogRear']) ? $data['fogRear'] : null;
        $this->container['turnRight'] = isset($data['turnRight']) ? $data['turnRight'] : null;
        $this->container['turnLeft'] = isset($data['turnLeft']) ? $data['turnLeft'] : null;
        $this->container['brakeLight'] = isset($data['brakeLight']) ? $data['brakeLight'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['lastUpdate'] = isset($data['lastUpdate']) ? $data['lastUpdate'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets fogFront
     *
     * @return \Psa\ConnectedCar\Model\RunninglightstatuslistFogFront
     */
    public function getFogFront()
    {
        return $this->container['fogFront'];
    }

    /**
     * Sets fogFront
     *
     * @param \Psa\ConnectedCar\Model\RunninglightstatuslistFogFront $fogFront fogFront
     *
     * @return $this
     */
    public function setFogFront($fogFront)
    {
        $this->container['fogFront'] = $fogFront;

        return $this;
    }

    /**
     * Gets fogRear
     *
     * @return \Psa\ConnectedCar\Model\RunninglightstatuslistFogFront
     */
    public function getFogRear()
    {
        return $this->container['fogRear'];
    }

    /**
     * Sets fogRear
     *
     * @param \Psa\ConnectedCar\Model\RunninglightstatuslistFogFront $fogRear fogRear
     *
     * @return $this
     */
    public function setFogRear($fogRear)
    {
        $this->container['fogRear'] = $fogRear;

        return $this;
    }

    /**
     * Gets turnRight
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getTurnRight()
    {
        return $this->container['turnRight'];
    }

    /**
     * Sets turnRight
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $turnRight turnRight
     *
     * @return $this
     */
    public function setTurnRight($turnRight)
    {
        $this->container['turnRight'] = $turnRight;

        return $this;
    }

    /**
     * Gets turnLeft
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getTurnLeft()
    {
        return $this->container['turnLeft'];
    }

    /**
     * Sets turnLeft
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $turnLeft turnLeft
     *
     * @return $this
     */
    public function setTurnLeft($turnLeft)
    {
        $this->container['turnLeft'] = $turnLeft;

        return $this;
    }

    /**
     * Gets brakeLight
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getBrakeLight()
    {
        return $this->container['brakeLight'];
    }

    /**
     * Sets brakeLight
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $brakeLight brakeLight
     *
     * @return $this
     */
    public function setBrakeLight($brakeLight)
    {
        $this->container['brakeLight'] = $brakeLight;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin vin
     *
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets lastUpdate
     *
     * @return string
     */
    public function getLastUpdate()
    {
        return $this->container['lastUpdate'];
    }

    /**
     * Sets lastUpdate
     *
     * @param string $lastUpdate lastUpdate
     *
     * @return $this
     */
    public function setLastUpdate($lastUpdate)
    {
        $this->container['lastUpdate'] = $lastUpdate;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return string
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param string $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


