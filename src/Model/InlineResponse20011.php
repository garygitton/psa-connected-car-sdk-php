<?php
/**
 * InlineResponse20011
 *
 * PHP version 5
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Connected Car Development
 *
 * This is the first release of our connected car API. With this API you can access more than 89 signals in a car. This API is available on Peugeot, CitroÃ«n and DS cars.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: connectedcar@mpsa.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Psa\ConnectedCar\Model;

use \ArrayAccess;
use \Psa\ConnectedCar\ObjectSerializer;

/**
 * InlineResponse20011 Class Doc Comment
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20011 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_11';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'edMarkType' => 'string',
        'edMarkLabel' => 'string',
        'edCategoryCode' => 'string',
        'edCategoryLabel' => 'string',
        'edEvaluation' => 'string',
        'edAdvice' => 'string',
        'edLevel' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'edMarkType' => null,
        'edMarkLabel' => null,
        'edCategoryCode' => null,
        'edCategoryLabel' => null,
        'edEvaluation' => null,
        'edAdvice' => null,
        'edLevel' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'edMarkType' => 'edMarkType',
        'edMarkLabel' => 'edMarkLabel',
        'edCategoryCode' => 'edCategoryCode',
        'edCategoryLabel' => 'edCategoryLabel',
        'edEvaluation' => 'edEvaluation',
        'edAdvice' => 'edAdvice',
        'edLevel' => 'edLevel'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'edMarkType' => 'setEdMarkType',
        'edMarkLabel' => 'setEdMarkLabel',
        'edCategoryCode' => 'setEdCategoryCode',
        'edCategoryLabel' => 'setEdCategoryLabel',
        'edEvaluation' => 'setEdEvaluation',
        'edAdvice' => 'setEdAdvice',
        'edLevel' => 'setEdLevel'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'edMarkType' => 'getEdMarkType',
        'edMarkLabel' => 'getEdMarkLabel',
        'edCategoryCode' => 'getEdCategoryCode',
        'edCategoryLabel' => 'getEdCategoryLabel',
        'edEvaluation' => 'getEdEvaluation',
        'edAdvice' => 'getEdAdvice',
        'edLevel' => 'getEdLevel'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['edMarkType'] = isset($data['edMarkType']) ? $data['edMarkType'] : null;
        $this->container['edMarkLabel'] = isset($data['edMarkLabel']) ? $data['edMarkLabel'] : null;
        $this->container['edCategoryCode'] = isset($data['edCategoryCode']) ? $data['edCategoryCode'] : null;
        $this->container['edCategoryLabel'] = isset($data['edCategoryLabel']) ? $data['edCategoryLabel'] : null;
        $this->container['edEvaluation'] = isset($data['edEvaluation']) ? $data['edEvaluation'] : null;
        $this->container['edAdvice'] = isset($data['edAdvice']) ? $data['edAdvice'] : null;
        $this->container['edLevel'] = isset($data['edLevel']) ? $data['edLevel'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets edMarkType
     *
     * @return string
     */
    public function getEdMarkType()
    {
        return $this->container['edMarkType'];
    }

    /**
     * Sets edMarkType
     *
     * @param string $edMarkType edMarkType
     *
     * @return $this
     */
    public function setEdMarkType($edMarkType)
    {
        $this->container['edMarkType'] = $edMarkType;

        return $this;
    }

    /**
     * Gets edMarkLabel
     *
     * @return string
     */
    public function getEdMarkLabel()
    {
        return $this->container['edMarkLabel'];
    }

    /**
     * Sets edMarkLabel
     *
     * @param string $edMarkLabel edMarkLabel
     *
     * @return $this
     */
    public function setEdMarkLabel($edMarkLabel)
    {
        $this->container['edMarkLabel'] = $edMarkLabel;

        return $this;
    }

    /**
     * Gets edCategoryCode
     *
     * @return string
     */
    public function getEdCategoryCode()
    {
        return $this->container['edCategoryCode'];
    }

    /**
     * Sets edCategoryCode
     *
     * @param string $edCategoryCode edCategoryCode
     *
     * @return $this
     */
    public function setEdCategoryCode($edCategoryCode)
    {
        $this->container['edCategoryCode'] = $edCategoryCode;

        return $this;
    }

    /**
     * Gets edCategoryLabel
     *
     * @return string
     */
    public function getEdCategoryLabel()
    {
        return $this->container['edCategoryLabel'];
    }

    /**
     * Sets edCategoryLabel
     *
     * @param string $edCategoryLabel edCategoryLabel
     *
     * @return $this
     */
    public function setEdCategoryLabel($edCategoryLabel)
    {
        $this->container['edCategoryLabel'] = $edCategoryLabel;

        return $this;
    }

    /**
     * Gets edEvaluation
     *
     * @return string
     */
    public function getEdEvaluation()
    {
        return $this->container['edEvaluation'];
    }

    /**
     * Sets edEvaluation
     *
     * @param string $edEvaluation edEvaluation
     *
     * @return $this
     */
    public function setEdEvaluation($edEvaluation)
    {
        $this->container['edEvaluation'] = $edEvaluation;

        return $this;
    }

    /**
     * Gets edAdvice
     *
     * @return string
     */
    public function getEdAdvice()
    {
        return $this->container['edAdvice'];
    }

    /**
     * Sets edAdvice
     *
     * @param string $edAdvice edAdvice
     *
     * @return $this
     */
    public function setEdAdvice($edAdvice)
    {
        $this->container['edAdvice'] = $edAdvice;

        return $this;
    }

    /**
     * Gets edLevel
     *
     * @return string
     */
    public function getEdLevel()
    {
        return $this->container['edLevel'];
    }

    /**
     * Sets edLevel
     *
     * @param string $edLevel edLevel
     *
     * @return $this
     */
    public function setEdLevel($edLevel)
    {
        $this->container['edLevel'] = $edLevel;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


