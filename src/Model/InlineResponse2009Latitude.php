<?php
/**
 * InlineResponse2009Latitude
 *
 * PHP version 5
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Connected Car Development
 *
 * This is the first release of our connected car API. With this API you can access more than 89 signals in a car. This API is available on Peugeot, CitroÃ«n and DS cars.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: connectedcar@mpsa.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Psa\ConnectedCar\Model;

use \ArrayAccess;
use \Psa\ConnectedCar\ObjectSerializer;

/**
 * InlineResponse2009Latitude Class Doc Comment
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse2009Latitude implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_9_latitude';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        '_6' => 'string',
        '_12' => 'string',
        '_18' => 'string',
        '_24' => 'string',
        '_30' => 'string',
        '_36' => 'string',
        '_42' => 'string',
        '_48' => 'string',
        '_54' => 'string',
        '_60' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        '_6' => null,
        '_12' => null,
        '_18' => null,
        '_24' => null,
        '_30' => null,
        '_36' => null,
        '_42' => null,
        '_48' => null,
        '_54' => null,
        '_60' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        '_6' => '6',
        '_12' => '12',
        '_18' => '18',
        '_24' => '24',
        '_30' => '30',
        '_36' => '36',
        '_42' => '42',
        '_48' => '48',
        '_54' => '54',
        '_60' => '60'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        '_6' => 'set6',
        '_12' => 'set12',
        '_18' => 'set18',
        '_24' => 'set24',
        '_30' => 'set30',
        '_36' => 'set36',
        '_42' => 'set42',
        '_48' => 'set48',
        '_54' => 'set54',
        '_60' => 'set60'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        '_6' => 'get6',
        '_12' => 'get12',
        '_18' => 'get18',
        '_24' => 'get24',
        '_30' => 'get30',
        '_36' => 'get36',
        '_42' => 'get42',
        '_48' => 'get48',
        '_54' => 'get54',
        '_60' => 'get60'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['_6'] = isset($data['_6']) ? $data['_6'] : null;
        $this->container['_12'] = isset($data['_12']) ? $data['_12'] : null;
        $this->container['_18'] = isset($data['_18']) ? $data['_18'] : null;
        $this->container['_24'] = isset($data['_24']) ? $data['_24'] : null;
        $this->container['_30'] = isset($data['_30']) ? $data['_30'] : null;
        $this->container['_36'] = isset($data['_36']) ? $data['_36'] : null;
        $this->container['_42'] = isset($data['_42']) ? $data['_42'] : null;
        $this->container['_48'] = isset($data['_48']) ? $data['_48'] : null;
        $this->container['_54'] = isset($data['_54']) ? $data['_54'] : null;
        $this->container['_60'] = isset($data['_60']) ? $data['_60'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets _6
     *
     * @return string
     */
    public function get6()
    {
        return $this->container['_6'];
    }

    /**
     * Sets _6
     *
     * @param string $_6 _6
     *
     * @return $this
     */
    public function set6($_6)
    {
        $this->container['_6'] = $_6;

        return $this;
    }

    /**
     * Gets _12
     *
     * @return string
     */
    public function get12()
    {
        return $this->container['_12'];
    }

    /**
     * Sets _12
     *
     * @param string $_12 _12
     *
     * @return $this
     */
    public function set12($_12)
    {
        $this->container['_12'] = $_12;

        return $this;
    }

    /**
     * Gets _18
     *
     * @return string
     */
    public function get18()
    {
        return $this->container['_18'];
    }

    /**
     * Sets _18
     *
     * @param string $_18 _18
     *
     * @return $this
     */
    public function set18($_18)
    {
        $this->container['_18'] = $_18;

        return $this;
    }

    /**
     * Gets _24
     *
     * @return string
     */
    public function get24()
    {
        return $this->container['_24'];
    }

    /**
     * Sets _24
     *
     * @param string $_24 _24
     *
     * @return $this
     */
    public function set24($_24)
    {
        $this->container['_24'] = $_24;

        return $this;
    }

    /**
     * Gets _30
     *
     * @return string
     */
    public function get30()
    {
        return $this->container['_30'];
    }

    /**
     * Sets _30
     *
     * @param string $_30 _30
     *
     * @return $this
     */
    public function set30($_30)
    {
        $this->container['_30'] = $_30;

        return $this;
    }

    /**
     * Gets _36
     *
     * @return string
     */
    public function get36()
    {
        return $this->container['_36'];
    }

    /**
     * Sets _36
     *
     * @param string $_36 _36
     *
     * @return $this
     */
    public function set36($_36)
    {
        $this->container['_36'] = $_36;

        return $this;
    }

    /**
     * Gets _42
     *
     * @return string
     */
    public function get42()
    {
        return $this->container['_42'];
    }

    /**
     * Sets _42
     *
     * @param string $_42 _42
     *
     * @return $this
     */
    public function set42($_42)
    {
        $this->container['_42'] = $_42;

        return $this;
    }

    /**
     * Gets _48
     *
     * @return string
     */
    public function get48()
    {
        return $this->container['_48'];
    }

    /**
     * Sets _48
     *
     * @param string $_48 _48
     *
     * @return $this
     */
    public function set48($_48)
    {
        $this->container['_48'] = $_48;

        return $this;
    }

    /**
     * Gets _54
     *
     * @return string
     */
    public function get54()
    {
        return $this->container['_54'];
    }

    /**
     * Sets _54
     *
     * @param string $_54 _54
     *
     * @return $this
     */
    public function set54($_54)
    {
        $this->container['_54'] = $_54;

        return $this;
    }

    /**
     * Gets _60
     *
     * @return string
     */
    public function get60()
    {
        return $this->container['_60'];
    }

    /**
     * Sets _60
     *
     * @param string $_60 _60
     *
     * @return $this
     */
    public function set60($_60)
    {
        $this->container['_60'] = $_60;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


