<?php
/**
 * InlineResponse20014
 *
 * PHP version 5
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Connected Car Development
 *
 * This is the first release of our connected car API. With this API you can access more than 89 signals in a car. This API is available on Peugeot, CitroÃ«n and DS cars.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: connectedcar@mpsa.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Psa\ConnectedCar\Model;

use \ArrayAccess;
use \Psa\ConnectedCar\ObjectSerializer;

/**
 * InlineResponse20014 Class Doc Comment
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20014 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_14';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'autoECall' => 'float',
        'afil' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'respectTimeIntVeh' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'survBlindSpot' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'speedInfoPanel' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'rearSoundParkAssist' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'frontSoundParkAssist' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'laneKeepAssistLeft' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'laneKeepAssistRight' => '\Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight',
        'vin' => 'string',
        'lastUpdate' => 'string',
        'contract' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'autoECall' => null,
        'afil' => null,
        'respectTimeIntVeh' => null,
        'survBlindSpot' => null,
        'speedInfoPanel' => null,
        'rearSoundParkAssist' => null,
        'frontSoundParkAssist' => null,
        'laneKeepAssistLeft' => null,
        'laneKeepAssistRight' => null,
        'vin' => null,
        'lastUpdate' => null,
        'contract' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'autoECall' => 'autoECall',
        'afil' => 'afil',
        'respectTimeIntVeh' => 'respectTimeIntVeh',
        'survBlindSpot' => 'survBlindSpot',
        'speedInfoPanel' => 'speedInfoPanel',
        'rearSoundParkAssist' => 'rearSoundParkAssist',
        'frontSoundParkAssist' => 'frontSoundParkAssist',
        'laneKeepAssistLeft' => 'laneKeepAssistLeft',
        'laneKeepAssistRight' => 'laneKeepAssistRight',
        'vin' => 'vin',
        'lastUpdate' => 'lastUpdate',
        'contract' => 'contract'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'autoECall' => 'setAutoECall',
        'afil' => 'setAfil',
        'respectTimeIntVeh' => 'setRespectTimeIntVeh',
        'survBlindSpot' => 'setSurvBlindSpot',
        'speedInfoPanel' => 'setSpeedInfoPanel',
        'rearSoundParkAssist' => 'setRearSoundParkAssist',
        'frontSoundParkAssist' => 'setFrontSoundParkAssist',
        'laneKeepAssistLeft' => 'setLaneKeepAssistLeft',
        'laneKeepAssistRight' => 'setLaneKeepAssistRight',
        'vin' => 'setVin',
        'lastUpdate' => 'setLastUpdate',
        'contract' => 'setContract'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'autoECall' => 'getAutoECall',
        'afil' => 'getAfil',
        'respectTimeIntVeh' => 'getRespectTimeIntVeh',
        'survBlindSpot' => 'getSurvBlindSpot',
        'speedInfoPanel' => 'getSpeedInfoPanel',
        'rearSoundParkAssist' => 'getRearSoundParkAssist',
        'frontSoundParkAssist' => 'getFrontSoundParkAssist',
        'laneKeepAssistLeft' => 'getLaneKeepAssistLeft',
        'laneKeepAssistRight' => 'getLaneKeepAssistRight',
        'vin' => 'getVin',
        'lastUpdate' => 'getLastUpdate',
        'contract' => 'getContract'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['autoECall'] = isset($data['autoECall']) ? $data['autoECall'] : null;
        $this->container['afil'] = isset($data['afil']) ? $data['afil'] : null;
        $this->container['respectTimeIntVeh'] = isset($data['respectTimeIntVeh']) ? $data['respectTimeIntVeh'] : null;
        $this->container['survBlindSpot'] = isset($data['survBlindSpot']) ? $data['survBlindSpot'] : null;
        $this->container['speedInfoPanel'] = isset($data['speedInfoPanel']) ? $data['speedInfoPanel'] : null;
        $this->container['rearSoundParkAssist'] = isset($data['rearSoundParkAssist']) ? $data['rearSoundParkAssist'] : null;
        $this->container['frontSoundParkAssist'] = isset($data['frontSoundParkAssist']) ? $data['frontSoundParkAssist'] : null;
        $this->container['laneKeepAssistLeft'] = isset($data['laneKeepAssistLeft']) ? $data['laneKeepAssistLeft'] : null;
        $this->container['laneKeepAssistRight'] = isset($data['laneKeepAssistRight']) ? $data['laneKeepAssistRight'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
        $this->container['lastUpdate'] = isset($data['lastUpdate']) ? $data['lastUpdate'] : null;
        $this->container['contract'] = isset($data['contract']) ? $data['contract'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets autoECall
     *
     * @return float
     */
    public function getAutoECall()
    {
        return $this->container['autoECall'];
    }

    /**
     * Sets autoECall
     *
     * @param float $autoECall autoECall
     *
     * @return $this
     */
    public function setAutoECall($autoECall)
    {
        $this->container['autoECall'] = $autoECall;

        return $this;
    }

    /**
     * Gets afil
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getAfil()
    {
        return $this->container['afil'];
    }

    /**
     * Sets afil
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $afil afil
     *
     * @return $this
     */
    public function setAfil($afil)
    {
        $this->container['afil'] = $afil;

        return $this;
    }

    /**
     * Gets respectTimeIntVeh
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getRespectTimeIntVeh()
    {
        return $this->container['respectTimeIntVeh'];
    }

    /**
     * Sets respectTimeIntVeh
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $respectTimeIntVeh respectTimeIntVeh
     *
     * @return $this
     */
    public function setRespectTimeIntVeh($respectTimeIntVeh)
    {
        $this->container['respectTimeIntVeh'] = $respectTimeIntVeh;

        return $this;
    }

    /**
     * Gets survBlindSpot
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getSurvBlindSpot()
    {
        return $this->container['survBlindSpot'];
    }

    /**
     * Sets survBlindSpot
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $survBlindSpot survBlindSpot
     *
     * @return $this
     */
    public function setSurvBlindSpot($survBlindSpot)
    {
        $this->container['survBlindSpot'] = $survBlindSpot;

        return $this;
    }

    /**
     * Gets speedInfoPanel
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getSpeedInfoPanel()
    {
        return $this->container['speedInfoPanel'];
    }

    /**
     * Sets speedInfoPanel
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $speedInfoPanel speedInfoPanel
     *
     * @return $this
     */
    public function setSpeedInfoPanel($speedInfoPanel)
    {
        $this->container['speedInfoPanel'] = $speedInfoPanel;

        return $this;
    }

    /**
     * Gets rearSoundParkAssist
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getRearSoundParkAssist()
    {
        return $this->container['rearSoundParkAssist'];
    }

    /**
     * Sets rearSoundParkAssist
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $rearSoundParkAssist rearSoundParkAssist
     *
     * @return $this
     */
    public function setRearSoundParkAssist($rearSoundParkAssist)
    {
        $this->container['rearSoundParkAssist'] = $rearSoundParkAssist;

        return $this;
    }

    /**
     * Gets frontSoundParkAssist
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getFrontSoundParkAssist()
    {
        return $this->container['frontSoundParkAssist'];
    }

    /**
     * Sets frontSoundParkAssist
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $frontSoundParkAssist frontSoundParkAssist
     *
     * @return $this
     */
    public function setFrontSoundParkAssist($frontSoundParkAssist)
    {
        $this->container['frontSoundParkAssist'] = $frontSoundParkAssist;

        return $this;
    }

    /**
     * Gets laneKeepAssistLeft
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getLaneKeepAssistLeft()
    {
        return $this->container['laneKeepAssistLeft'];
    }

    /**
     * Sets laneKeepAssistLeft
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $laneKeepAssistLeft laneKeepAssistLeft
     *
     * @return $this
     */
    public function setLaneKeepAssistLeft($laneKeepAssistLeft)
    {
        $this->container['laneKeepAssistLeft'] = $laneKeepAssistLeft;

        return $this;
    }

    /**
     * Gets laneKeepAssistRight
     *
     * @return \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight
     */
    public function getLaneKeepAssistRight()
    {
        return $this->container['laneKeepAssistRight'];
    }

    /**
     * Sets laneKeepAssistRight
     *
     * @param \Psa\ConnectedCar\Model\EnvironmentlistInfoDayAndNight $laneKeepAssistRight laneKeepAssistRight
     *
     * @return $this
     */
    public function setLaneKeepAssistRight($laneKeepAssistRight)
    {
        $this->container['laneKeepAssistRight'] = $laneKeepAssistRight;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin vin
     *
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }

    /**
     * Gets lastUpdate
     *
     * @return string
     */
    public function getLastUpdate()
    {
        return $this->container['lastUpdate'];
    }

    /**
     * Sets lastUpdate
     *
     * @param string $lastUpdate lastUpdate
     *
     * @return $this
     */
    public function setLastUpdate($lastUpdate)
    {
        $this->container['lastUpdate'] = $lastUpdate;

        return $this;
    }

    /**
     * Gets contract
     *
     * @return string
     */
    public function getContract()
    {
        return $this->container['contract'];
    }

    /**
     * Sets contract
     *
     * @param string $contract contract
     *
     * @return $this
     */
    public function setContract($contract)
    {
        $this->container['contract'] = $contract;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


