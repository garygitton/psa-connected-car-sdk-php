<?php
/**
 * InlineResponse20019
 *
 * PHP version 5
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Connected Car Development
 *
 * This is the first release of our connected car API. With this API you can access more than 89 signals in a car. This API is available on Peugeot, CitroÃ«n and DS cars.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: connectedcar@mpsa.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Psa\ConnectedCar\Model;

use \ArrayAccess;
use \Psa\ConnectedCar\ObjectSerializer;

/**
 * InlineResponse20019 Class Doc Comment
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InlineResponse20019 implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'inline_response_200_19';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'color' => 'string',
        'codFin' => 'string',
        'codSil' => 'string',
        'codCcn' => 'string',
        'codLog' => 'float',
        'lcdv' => 'string',
        'vis' => 'string',
        'imei' => 'string',
        'deliveryDate' => 'string',
        'manufacturingDate' => 'string',
        'codAcc' => 'string',
        'codEng' => 'string',
        'codFam' => 'string',
        'flagSual' => 'float',
        'brand' => 'string',
        'design' => 'string',
        'vehLiv' => 'string',
        'vin' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'color' => null,
        'codFin' => null,
        'codSil' => null,
        'codCcn' => null,
        'codLog' => null,
        'lcdv' => null,
        'vis' => null,
        'imei' => null,
        'deliveryDate' => null,
        'manufacturingDate' => null,
        'codAcc' => null,
        'codEng' => null,
        'codFam' => null,
        'flagSual' => null,
        'brand' => null,
        'design' => null,
        'vehLiv' => null,
        'vin' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'color' => 'color',
        'codFin' => 'cod_fin',
        'codSil' => 'cod_sil',
        'codCcn' => 'cod_ccn',
        'codLog' => 'cod_log',
        'lcdv' => 'lcdv',
        'vis' => 'vis',
        'imei' => 'imei',
        'deliveryDate' => 'deliveryDate',
        'manufacturingDate' => 'manufacturingDate',
        'codAcc' => 'cod_acc',
        'codEng' => 'cod_eng',
        'codFam' => 'cod_fam',
        'flagSual' => 'flagSual',
        'brand' => 'brand',
        'design' => 'design',
        'vehLiv' => 'vehLiv',
        'vin' => 'vin'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'color' => 'setColor',
        'codFin' => 'setCodFin',
        'codSil' => 'setCodSil',
        'codCcn' => 'setCodCcn',
        'codLog' => 'setCodLog',
        'lcdv' => 'setLcdv',
        'vis' => 'setVis',
        'imei' => 'setImei',
        'deliveryDate' => 'setDeliveryDate',
        'manufacturingDate' => 'setManufacturingDate',
        'codAcc' => 'setCodAcc',
        'codEng' => 'setCodEng',
        'codFam' => 'setCodFam',
        'flagSual' => 'setFlagSual',
        'brand' => 'setBrand',
        'design' => 'setDesign',
        'vehLiv' => 'setVehLiv',
        'vin' => 'setVin'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'color' => 'getColor',
        'codFin' => 'getCodFin',
        'codSil' => 'getCodSil',
        'codCcn' => 'getCodCcn',
        'codLog' => 'getCodLog',
        'lcdv' => 'getLcdv',
        'vis' => 'getVis',
        'imei' => 'getImei',
        'deliveryDate' => 'getDeliveryDate',
        'manufacturingDate' => 'getManufacturingDate',
        'codAcc' => 'getCodAcc',
        'codEng' => 'getCodEng',
        'codFam' => 'getCodFam',
        'flagSual' => 'getFlagSual',
        'brand' => 'getBrand',
        'design' => 'getDesign',
        'vehLiv' => 'getVehLiv',
        'vin' => 'getVin'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['color'] = isset($data['color']) ? $data['color'] : null;
        $this->container['codFin'] = isset($data['codFin']) ? $data['codFin'] : null;
        $this->container['codSil'] = isset($data['codSil']) ? $data['codSil'] : null;
        $this->container['codCcn'] = isset($data['codCcn']) ? $data['codCcn'] : null;
        $this->container['codLog'] = isset($data['codLog']) ? $data['codLog'] : null;
        $this->container['lcdv'] = isset($data['lcdv']) ? $data['lcdv'] : null;
        $this->container['vis'] = isset($data['vis']) ? $data['vis'] : null;
        $this->container['imei'] = isset($data['imei']) ? $data['imei'] : null;
        $this->container['deliveryDate'] = isset($data['deliveryDate']) ? $data['deliveryDate'] : null;
        $this->container['manufacturingDate'] = isset($data['manufacturingDate']) ? $data['manufacturingDate'] : null;
        $this->container['codAcc'] = isset($data['codAcc']) ? $data['codAcc'] : null;
        $this->container['codEng'] = isset($data['codEng']) ? $data['codEng'] : null;
        $this->container['codFam'] = isset($data['codFam']) ? $data['codFam'] : null;
        $this->container['flagSual'] = isset($data['flagSual']) ? $data['flagSual'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['design'] = isset($data['design']) ? $data['design'] : null;
        $this->container['vehLiv'] = isset($data['vehLiv']) ? $data['vehLiv'] : null;
        $this->container['vin'] = isset($data['vin']) ? $data['vin'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets color
     *
     * @return string
     */
    public function getColor()
    {
        return $this->container['color'];
    }

    /**
     * Sets color
     *
     * @param string $color color
     *
     * @return $this
     */
    public function setColor($color)
    {
        $this->container['color'] = $color;

        return $this;
    }

    /**
     * Gets codFin
     *
     * @return string
     */
    public function getCodFin()
    {
        return $this->container['codFin'];
    }

    /**
     * Sets codFin
     *
     * @param string $codFin codFin
     *
     * @return $this
     */
    public function setCodFin($codFin)
    {
        $this->container['codFin'] = $codFin;

        return $this;
    }

    /**
     * Gets codSil
     *
     * @return string
     */
    public function getCodSil()
    {
        return $this->container['codSil'];
    }

    /**
     * Sets codSil
     *
     * @param string $codSil codSil
     *
     * @return $this
     */
    public function setCodSil($codSil)
    {
        $this->container['codSil'] = $codSil;

        return $this;
    }

    /**
     * Gets codCcn
     *
     * @return string
     */
    public function getCodCcn()
    {
        return $this->container['codCcn'];
    }

    /**
     * Sets codCcn
     *
     * @param string $codCcn codCcn
     *
     * @return $this
     */
    public function setCodCcn($codCcn)
    {
        $this->container['codCcn'] = $codCcn;

        return $this;
    }

    /**
     * Gets codLog
     *
     * @return float
     */
    public function getCodLog()
    {
        return $this->container['codLog'];
    }

    /**
     * Sets codLog
     *
     * @param float $codLog codLog
     *
     * @return $this
     */
    public function setCodLog($codLog)
    {
        $this->container['codLog'] = $codLog;

        return $this;
    }

    /**
     * Gets lcdv
     *
     * @return string
     */
    public function getLcdv()
    {
        return $this->container['lcdv'];
    }

    /**
     * Sets lcdv
     *
     * @param string $lcdv lcdv
     *
     * @return $this
     */
    public function setLcdv($lcdv)
    {
        $this->container['lcdv'] = $lcdv;

        return $this;
    }

    /**
     * Gets vis
     *
     * @return string
     */
    public function getVis()
    {
        return $this->container['vis'];
    }

    /**
     * Sets vis
     *
     * @param string $vis vis
     *
     * @return $this
     */
    public function setVis($vis)
    {
        $this->container['vis'] = $vis;

        return $this;
    }

    /**
     * Gets imei
     *
     * @return string
     */
    public function getImei()
    {
        return $this->container['imei'];
    }

    /**
     * Sets imei
     *
     * @param string $imei imei
     *
     * @return $this
     */
    public function setImei($imei)
    {
        $this->container['imei'] = $imei;

        return $this;
    }

    /**
     * Gets deliveryDate
     *
     * @return string
     */
    public function getDeliveryDate()
    {
        return $this->container['deliveryDate'];
    }

    /**
     * Sets deliveryDate
     *
     * @param string $deliveryDate deliveryDate
     *
     * @return $this
     */
    public function setDeliveryDate($deliveryDate)
    {
        $this->container['deliveryDate'] = $deliveryDate;

        return $this;
    }

    /**
     * Gets manufacturingDate
     *
     * @return string
     */
    public function getManufacturingDate()
    {
        return $this->container['manufacturingDate'];
    }

    /**
     * Sets manufacturingDate
     *
     * @param string $manufacturingDate manufacturingDate
     *
     * @return $this
     */
    public function setManufacturingDate($manufacturingDate)
    {
        $this->container['manufacturingDate'] = $manufacturingDate;

        return $this;
    }

    /**
     * Gets codAcc
     *
     * @return string
     */
    public function getCodAcc()
    {
        return $this->container['codAcc'];
    }

    /**
     * Sets codAcc
     *
     * @param string $codAcc codAcc
     *
     * @return $this
     */
    public function setCodAcc($codAcc)
    {
        $this->container['codAcc'] = $codAcc;

        return $this;
    }

    /**
     * Gets codEng
     *
     * @return string
     */
    public function getCodEng()
    {
        return $this->container['codEng'];
    }

    /**
     * Sets codEng
     *
     * @param string $codEng codEng
     *
     * @return $this
     */
    public function setCodEng($codEng)
    {
        $this->container['codEng'] = $codEng;

        return $this;
    }

    /**
     * Gets codFam
     *
     * @return string
     */
    public function getCodFam()
    {
        return $this->container['codFam'];
    }

    /**
     * Sets codFam
     *
     * @param string $codFam codFam
     *
     * @return $this
     */
    public function setCodFam($codFam)
    {
        $this->container['codFam'] = $codFam;

        return $this;
    }

    /**
     * Gets flagSual
     *
     * @return float
     */
    public function getFlagSual()
    {
        return $this->container['flagSual'];
    }

    /**
     * Sets flagSual
     *
     * @param float $flagSual flagSual
     *
     * @return $this
     */
    public function setFlagSual($flagSual)
    {
        $this->container['flagSual'] = $flagSual;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets design
     *
     * @return string
     */
    public function getDesign()
    {
        return $this->container['design'];
    }

    /**
     * Sets design
     *
     * @param string $design design
     *
     * @return $this
     */
    public function setDesign($design)
    {
        $this->container['design'] = $design;

        return $this;
    }

    /**
     * Gets vehLiv
     *
     * @return string
     */
    public function getVehLiv()
    {
        return $this->container['vehLiv'];
    }

    /**
     * Sets vehLiv
     *
     * @param string $vehLiv vehLiv
     *
     * @return $this
     */
    public function setVehLiv($vehLiv)
    {
        $this->container['vehLiv'] = $vehLiv;

        return $this;
    }

    /**
     * Gets vin
     *
     * @return string
     */
    public function getVin()
    {
        return $this->container['vin'];
    }

    /**
     * Sets vin
     *
     * @param string $vin vin
     *
     * @return $this
     */
    public function setVin($vin)
    {
        $this->container['vin'] = $vin;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


