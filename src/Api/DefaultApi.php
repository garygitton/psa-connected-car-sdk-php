<?php
/**
 * DefaultApi
 * PHP version 5
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Connected Car Development
 *
 * This is the first release of our connected car API. With this API you can access more than 89 signals in a car. This API is available on Peugeot, Citroën and DS cars.
 *
 * OpenAPI spec version: 1.0.5
 * Contact: connectedcar@mpsa.com
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.4.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Psa\ConnectedCar\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Psa\ConnectedCar\ApiException;
use Psa\ConnectedCar\Configuration;
use Psa\ConnectedCar\HeaderSelector;
use Psa\ConnectedCar\ObjectSerializer;

/**
 * DefaultApi Class Doc Comment
 *
 * @category Class
 * @package  Psa\ConnectedCar
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class DefaultApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation fetchAlertReferential
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20010[]
     */
    public function fetchAlertReferential($locale = '', $brand = '')
    {
        list($response) = $this->fetchAlertReferentialWithHttpInfo($locale, $brand);
        return $response;
    }

    /**
     * Operation fetchAlertReferentialWithHttpInfo
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20010[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAlertReferentialWithHttpInfo($locale = '', $brand = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20010[]';
        $request = $this->fetchAlertReferentialRequest($locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20010[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAlertReferentialAsync
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAlertReferentialAsync($locale = '', $brand = '')
    {
        return $this->fetchAlertReferentialAsyncWithHttpInfo($locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAlertReferentialAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAlertReferentialAsyncWithHttpInfo($locale = '', $brand = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20010[]';
        $request = $this->fetchAlertReferentialRequest($locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAlertReferential'
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAlertReferentialRequest($locale = '', $brand = '')
    {

        $resourcePath = '/referential/alert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllCrash
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse200[]
     */
    public function fetchAllCrash($body, $listsecond = '')
    {
        list($response) = $this->fetchAllCrashWithHttpInfo($body, $listsecond);
        return $response;
    }

    /**
     * Operation fetchAllCrashWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse200[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllCrashWithHttpInfo($body, $listsecond = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse200[]';
        $request = $this->fetchAllCrashRequest($body, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse200[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllCrashAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllCrashAsync($body, $listsecond = '')
    {
        return $this->fetchAllCrashAsyncWithHttpInfo($body, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllCrashAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllCrashAsyncWithHttpInfo($body, $listsecond = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse200[]';
        $request = $this->fetchAllCrashRequest($body, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllCrash'
     *
     * @param  \Psa\ConnectedCar\Model\Body $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllCrashRequest($body, $listsecond = '')
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllCrash'
            );
        }

        $resourcePath = '/crash/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllEcodrivingReferential
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20011[]
     */
    public function fetchAllEcodrivingReferential($locale = '', $brand = '')
    {
        list($response) = $this->fetchAllEcodrivingReferentialWithHttpInfo($locale, $brand);
        return $response;
    }

    /**
     * Operation fetchAllEcodrivingReferentialWithHttpInfo
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20011[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllEcodrivingReferentialWithHttpInfo($locale = '', $brand = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20011[]';
        $request = $this->fetchAllEcodrivingReferentialRequest($locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20011[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllEcodrivingReferentialAsync
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcodrivingReferentialAsync($locale = '', $brand = '')
    {
        return $this->fetchAllEcodrivingReferentialAsyncWithHttpInfo($locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllEcodrivingReferentialAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcodrivingReferentialAsyncWithHttpInfo($locale = '', $brand = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20011[]';
        $request = $this->fetchAllEcodrivingReferentialRequest($locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllEcodrivingReferential'
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllEcodrivingReferentialRequest($locale = '', $brand = '')
    {

        $resourcePath = '/referential/ecodriving';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllEcoevaluation
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body1 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2002[]
     */
    public function fetchAllEcoevaluation($body, $locale, $brand)
    {
        list($response) = $this->fetchAllEcoevaluationWithHttpInfo($body, $locale, $brand);
        return $response;
    }

    /**
     * Operation fetchAllEcoevaluationWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body1 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2002[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllEcoevaluationWithHttpInfo($body, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2002[]';
        $request = $this->fetchAllEcoevaluationRequest($body, $locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2002[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllEcoevaluationAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body1 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcoevaluationAsync($body, $locale, $brand)
    {
        return $this->fetchAllEcoevaluationAsyncWithHttpInfo($body, $locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllEcoevaluationAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body1 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcoevaluationAsyncWithHttpInfo($body, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2002[]';
        $request = $this->fetchAllEcoevaluationRequest($body, $locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllEcoevaluation'
     *
     * @param  \Psa\ConnectedCar\Model\Body1 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllEcoevaluationRequest($body, $locale, $brand)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllEcoevaluation'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchAllEcoevaluation'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchAllEcoevaluation'
            );
        }

        $resourcePath = '/ecodriving/evaluation/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllEcoevaluationPerDay
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body2 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2003[]
     */
    public function fetchAllEcoevaluationPerDay($body, $locale, $brand, $fromday, $today)
    {
        list($response) = $this->fetchAllEcoevaluationPerDayWithHttpInfo($body, $locale, $brand, $fromday, $today);
        return $response;
    }

    /**
     * Operation fetchAllEcoevaluationPerDayWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body2 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllEcoevaluationPerDayWithHttpInfo($body, $locale, $brand, $fromday, $today)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchAllEcoevaluationPerDayRequest($body, $locale, $brand, $fromday, $today);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2003[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllEcoevaluationPerDayAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body2 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcoevaluationPerDayAsync($body, $locale, $brand, $fromday, $today)
    {
        return $this->fetchAllEcoevaluationPerDayAsyncWithHttpInfo($body, $locale, $brand, $fromday, $today)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllEcoevaluationPerDayAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body2 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcoevaluationPerDayAsyncWithHttpInfo($body, $locale, $brand, $fromday, $today)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchAllEcoevaluationPerDayRequest($body, $locale, $brand, $fromday, $today);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllEcoevaluationPerDay'
     *
     * @param  \Psa\ConnectedCar\Model\Body2 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllEcoevaluationPerDayRequest($body, $locale, $brand, $fromday, $today)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllEcoevaluationPerDay'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchAllEcoevaluationPerDay'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchAllEcoevaluationPerDay'
            );
        }
        // verify the required parameter 'fromday' is set
        if ($fromday === null || (is_array($fromday) && count($fromday) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromday when calling fetchAllEcoevaluationPerDay'
            );
        }
        // verify the required parameter 'today' is set
        if ($today === null || (is_array($today) && count($today) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $today when calling fetchAllEcoevaluationPerDay'
            );
        }

        $resourcePath = '/ecodriving/evaluation/trip/day/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($fromday !== null) {
            $queryParams['fromday'] = ObjectSerializer::toQueryValue($fromday);
        }
        // query params
        if ($today !== null) {
            $queryParams['today'] = ObjectSerializer::toQueryValue($today);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllEcoevaluationPerMonth
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body3 $body List of vin and list of related contracts (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2003[]
     */
    public function fetchAllEcoevaluationPerMonth($body, $brand, $locale, $frommonth, $tomonth)
    {
        list($response) = $this->fetchAllEcoevaluationPerMonthWithHttpInfo($body, $brand, $locale, $frommonth, $tomonth);
        return $response;
    }

    /**
     * Operation fetchAllEcoevaluationPerMonthWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body3 $body List of vin and list of related contracts (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllEcoevaluationPerMonthWithHttpInfo($body, $brand, $locale, $frommonth, $tomonth)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchAllEcoevaluationPerMonthRequest($body, $brand, $locale, $frommonth, $tomonth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2003[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllEcoevaluationPerMonthAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body3 $body List of vin and list of related contracts (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcoevaluationPerMonthAsync($body, $brand, $locale, $frommonth, $tomonth)
    {
        return $this->fetchAllEcoevaluationPerMonthAsyncWithHttpInfo($body, $brand, $locale, $frommonth, $tomonth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllEcoevaluationPerMonthAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body3 $body List of vin and list of related contracts (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEcoevaluationPerMonthAsyncWithHttpInfo($body, $brand, $locale, $frommonth, $tomonth)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchAllEcoevaluationPerMonthRequest($body, $brand, $locale, $frommonth, $tomonth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllEcoevaluationPerMonth'
     *
     * @param  \Psa\ConnectedCar\Model\Body3 $body List of vin and list of related contracts (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllEcoevaluationPerMonthRequest($body, $brand, $locale, $frommonth, $tomonth)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllEcoevaluationPerMonth'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchAllEcoevaluationPerMonth'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchAllEcoevaluationPerMonth'
            );
        }
        // verify the required parameter 'frommonth' is set
        if ($frommonth === null || (is_array($frommonth) && count($frommonth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $frommonth when calling fetchAllEcoevaluationPerMonth'
            );
        }
        // verify the required parameter 'tomonth' is set
        if ($tomonth === null || (is_array($tomonth) && count($tomonth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tomonth when calling fetchAllEcoevaluationPerMonth'
            );
        }

        $resourcePath = '/ecodriving/evaluation/trip/month/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($frommonth !== null) {
            $queryParams['frommonth'] = ObjectSerializer::toQueryValue($frommonth);
        }
        // query params
        if ($tomonth !== null) {
            $queryParams['tomonth'] = ObjectSerializer::toQueryValue($tomonth);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllEnvironmentData
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body4 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2005[]
     */
    public function fetchAllEnvironmentData($body, $listsecond)
    {
        list($response) = $this->fetchAllEnvironmentDataWithHttpInfo($body, $listsecond);
        return $response;
    }

    /**
     * Operation fetchAllEnvironmentDataWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body4 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2005[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllEnvironmentDataWithHttpInfo($body, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2005[]';
        $request = $this->fetchAllEnvironmentDataRequest($body, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2005[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllEnvironmentDataAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body4 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEnvironmentDataAsync($body, $listsecond)
    {
        return $this->fetchAllEnvironmentDataAsyncWithHttpInfo($body, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllEnvironmentDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body4 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllEnvironmentDataAsyncWithHttpInfo($body, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2005[]';
        $request = $this->fetchAllEnvironmentDataRequest($body, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllEnvironmentData'
     *
     * @param  \Psa\ConnectedCar\Model\Body4 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllEnvironmentDataRequest($body, $listsecond)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllEnvironmentData'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchAllEnvironmentData'
            );
        }

        $resourcePath = '/environment/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllLightStatus
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body7 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20012[]
     */
    public function fetchAllLightStatus($body, $listsecond)
    {
        list($response) = $this->fetchAllLightStatusWithHttpInfo($body, $listsecond);
        return $response;
    }

    /**
     * Operation fetchAllLightStatusWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body7 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20012[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllLightStatusWithHttpInfo($body, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20012[]';
        $request = $this->fetchAllLightStatusRequest($body, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20012[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllLightStatusAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body7 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllLightStatusAsync($body, $listsecond)
    {
        return $this->fetchAllLightStatusAsyncWithHttpInfo($body, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllLightStatusAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body7 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllLightStatusAsyncWithHttpInfo($body, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20012[]';
        $request = $this->fetchAllLightStatusRequest($body, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllLightStatus'
     *
     * @param  \Psa\ConnectedCar\Model\Body7 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllLightStatusRequest($body, $listsecond)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllLightStatus'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchAllLightStatus'
            );
        }

        $resourcePath = '/running/lightstatus/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllMaintenanceAlert
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body6 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2007
     */
    public function fetchAllMaintenanceAlert($body, $locale, $brand, $active)
    {
        list($response) = $this->fetchAllMaintenanceAlertWithHttpInfo($body, $locale, $brand, $active);
        return $response;
    }

    /**
     * Operation fetchAllMaintenanceAlertWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body6 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2007, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllMaintenanceAlertWithHttpInfo($body, $locale, $brand, $active)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2007';
        $request = $this->fetchAllMaintenanceAlertRequest($body, $locale, $brand, $active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2007',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllMaintenanceAlertAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body6 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllMaintenanceAlertAsync($body, $locale, $brand, $active)
    {
        return $this->fetchAllMaintenanceAlertAsyncWithHttpInfo($body, $locale, $brand, $active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllMaintenanceAlertAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body6 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllMaintenanceAlertAsyncWithHttpInfo($body, $locale, $brand, $active)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2007';
        $request = $this->fetchAllMaintenanceAlertRequest($body, $locale, $brand, $active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllMaintenanceAlert'
     *
     * @param  \Psa\ConnectedCar\Model\Body6 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllMaintenanceAlertRequest($body, $locale, $brand, $active)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllMaintenanceAlert'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchAllMaintenanceAlert'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchAllMaintenanceAlert'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling fetchAllMaintenanceAlert'
            );
        }

        $resourcePath = '/maintenance/list/alert';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllMaintenanceData
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body5 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2006[]
     */
    public function fetchAllMaintenanceData($body, $locale, $brand)
    {
        list($response) = $this->fetchAllMaintenanceDataWithHttpInfo($body, $locale, $brand);
        return $response;
    }

    /**
     * Operation fetchAllMaintenanceDataWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body5 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2006[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllMaintenanceDataWithHttpInfo($body, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2006[]';
        $request = $this->fetchAllMaintenanceDataRequest($body, $locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2006[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllMaintenanceDataAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body5 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllMaintenanceDataAsync($body, $locale, $brand)
    {
        return $this->fetchAllMaintenanceDataAsyncWithHttpInfo($body, $locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllMaintenanceDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body5 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllMaintenanceDataAsyncWithHttpInfo($body, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2006[]';
        $request = $this->fetchAllMaintenanceDataRequest($body, $locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllMaintenanceData'
     *
     * @param  \Psa\ConnectedCar\Model\Body5 $body List of vin and list of related contracts (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllMaintenanceDataRequest($body, $locale, $brand)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllMaintenanceData'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchAllMaintenanceData'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchAllMaintenanceData'
            );
        }

        $resourcePath = '/maintenance/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllRunningData
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body8 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20013[]
     */
    public function fetchAllRunningData($body, $listsecond)
    {
        list($response) = $this->fetchAllRunningDataWithHttpInfo($body, $listsecond);
        return $response;
    }

    /**
     * Operation fetchAllRunningDataWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body8 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20013[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllRunningDataWithHttpInfo($body, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20013[]';
        $request = $this->fetchAllRunningDataRequest($body, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20013[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllRunningDataAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body8 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllRunningDataAsync($body, $listsecond)
    {
        return $this->fetchAllRunningDataAsyncWithHttpInfo($body, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllRunningDataAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body8 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllRunningDataAsyncWithHttpInfo($body, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20013[]';
        $request = $this->fetchAllRunningDataRequest($body, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllRunningData'
     *
     * @param  \Psa\ConnectedCar\Model\Body8 $body List of vin and list of related contracts (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllRunningDataRequest($body, $listsecond)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllRunningData'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchAllRunningData'
            );
        }

        $resourcePath = '/running/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllRunningDataByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20013
     */
    public function fetchAllRunningDataByVehicle($vin, $contract, $listsecond)
    {
        list($response) = $this->fetchAllRunningDataByVehicleWithHttpInfo($vin, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchAllRunningDataByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20013, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllRunningDataByVehicleWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20013';
        $request = $this->fetchAllRunningDataByVehicleRequest($vin, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20013',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllRunningDataByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllRunningDataByVehicleAsync($vin, $contract, $listsecond)
    {
        return $this->fetchAllRunningDataByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllRunningDataByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllRunningDataByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20013';
        $request = $this->fetchAllRunningDataByVehicleRequest($vin, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllRunningDataByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllRunningDataByVehicleRequest($vin, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchAllRunningDataByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchAllRunningDataByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchAllRunningDataByVehicle'
            );
        }

        $resourcePath = '/running/data/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchAllTrip
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body9 $body List of vin and list of related contracts (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20016
     */
    public function fetchAllTrip($body, $from, $to, $limit, $unit)
    {
        list($response) = $this->fetchAllTripWithHttpInfo($body, $from, $to, $limit, $unit);
        return $response;
    }

    /**
     * Operation fetchAllTripWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body9 $body List of vin and list of related contracts (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchAllTripWithHttpInfo($body, $from, $to, $limit, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20016';
        $request = $this->fetchAllTripRequest($body, $from, $to, $limit, $unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20016',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchAllTripAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body9 $body List of vin and list of related contracts (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllTripAsync($body, $from, $to, $limit, $unit)
    {
        return $this->fetchAllTripAsyncWithHttpInfo($body, $from, $to, $limit, $unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchAllTripAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body9 $body List of vin and list of related contracts (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchAllTripAsyncWithHttpInfo($body, $from, $to, $limit, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20016';
        $request = $this->fetchAllTripRequest($body, $from, $to, $limit, $unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchAllTrip'
     *
     * @param  \Psa\ConnectedCar\Model\Body9 $body List of vin and list of related contracts (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchAllTripRequest($body, $from, $to, $limit, $unit)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchAllTrip'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling fetchAllTrip'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling fetchAllTrip'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling fetchAllTrip'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling fetchAllTrip'
            );
        }

        $resourcePath = '/trip/list';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = ObjectSerializer::toQueryValue($unit);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchCrashByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2001
     */
    public function fetchCrashByVehicle($vin, $contract, $listsecond)
    {
        list($response) = $this->fetchCrashByVehicleWithHttpInfo($vin, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchCrashByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2001, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchCrashByVehicleWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2001';
        $request = $this->fetchCrashByVehicleRequest($vin, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2001',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchCrashByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchCrashByVehicleAsync($vin, $contract, $listsecond)
    {
        return $this->fetchCrashByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchCrashByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchCrashByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2001';
        $request = $this->fetchCrashByVehicleRequest($vin, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchCrashByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchCrashByVehicleRequest($vin, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchCrashByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchCrashByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchCrashByVehicle'
            );
        }

        $resourcePath = '/crash/get/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchEcoevaluationByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2002
     */
    public function fetchEcoevaluationByVehicle($vin, $contract, $locale, $brand)
    {
        list($response) = $this->fetchEcoevaluationByVehicleWithHttpInfo($vin, $contract, $locale, $brand);
        return $response;
    }

    /**
     * Operation fetchEcoevaluationByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2002, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchEcoevaluationByVehicleWithHttpInfo($vin, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2002';
        $request = $this->fetchEcoevaluationByVehicleRequest($vin, $contract, $locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2002',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchEcoevaluationByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationByVehicleAsync($vin, $contract, $locale, $brand)
    {
        return $this->fetchEcoevaluationByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchEcoevaluationByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2002';
        $request = $this->fetchEcoevaluationByVehicleRequest($vin, $contract, $locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchEcoevaluationByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchEcoevaluationByVehicleRequest($vin, $contract, $locale, $brand)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchEcoevaluationByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchEcoevaluationByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchEcoevaluationByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchEcoevaluationByVehicle'
            );
        }

        $resourcePath = '/ecodriving/evaluation/get/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchEcoevaluationByVehicleAndTrip
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid Trip&#39;s ID. You can get the id of a trip calling the _trip_ operation (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2004
     */
    public function fetchEcoevaluationByVehicleAndTrip($vin, $tripid, $contract, $locale, $brand)
    {
        list($response) = $this->fetchEcoevaluationByVehicleAndTripWithHttpInfo($vin, $tripid, $contract, $locale, $brand);
        return $response;
    }

    /**
     * Operation fetchEcoevaluationByVehicleAndTripWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid Trip&#39;s ID. You can get the id of a trip calling the _trip_ operation (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchEcoevaluationByVehicleAndTripWithHttpInfo($vin, $tripid, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2004';
        $request = $this->fetchEcoevaluationByVehicleAndTripRequest($vin, $tripid, $contract, $locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchEcoevaluationByVehicleAndTripAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid Trip&#39;s ID. You can get the id of a trip calling the _trip_ operation (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationByVehicleAndTripAsync($vin, $tripid, $contract, $locale, $brand)
    {
        return $this->fetchEcoevaluationByVehicleAndTripAsyncWithHttpInfo($vin, $tripid, $contract, $locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchEcoevaluationByVehicleAndTripAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid Trip&#39;s ID. You can get the id of a trip calling the _trip_ operation (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationByVehicleAndTripAsyncWithHttpInfo($vin, $tripid, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2004';
        $request = $this->fetchEcoevaluationByVehicleAndTripRequest($vin, $tripid, $contract, $locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchEcoevaluationByVehicleAndTrip'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid Trip&#39;s ID. You can get the id of a trip calling the _trip_ operation (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchEcoevaluationByVehicleAndTripRequest($vin, $tripid, $contract, $locale, $brand)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchEcoevaluationByVehicleAndTrip'
            );
        }
        // verify the required parameter 'tripid' is set
        if ($tripid === null || (is_array($tripid) && count($tripid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tripid when calling fetchEcoevaluationByVehicleAndTrip'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchEcoevaluationByVehicleAndTrip'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchEcoevaluationByVehicleAndTrip'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchEcoevaluationByVehicleAndTrip'
            );
        }

        $resourcePath = '/ecodriving/evaluation/pertrip/{vin}/{tripid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }
        // path params
        if ($tripid !== null) {
            $resourcePath = str_replace(
                '{' . 'tripid' . '}',
                ObjectSerializer::toPathValue($tripid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchEcoevaluationPerDayByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2003[]
     */
    public function fetchEcoevaluationPerDayByVehicle($vin, $contract, $locale, $brand, $fromday, $today)
    {
        list($response) = $this->fetchEcoevaluationPerDayByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $fromday, $today);
        return $response;
    }

    /**
     * Operation fetchEcoevaluationPerDayByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchEcoevaluationPerDayByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $fromday, $today)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchEcoevaluationPerDayByVehicleRequest($vin, $contract, $locale, $brand, $fromday, $today);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2003[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchEcoevaluationPerDayByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationPerDayByVehicleAsync($vin, $contract, $locale, $brand, $fromday, $today)
    {
        return $this->fetchEcoevaluationPerDayByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $fromday, $today)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchEcoevaluationPerDayByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationPerDayByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $fromday, $today)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchEcoevaluationPerDayByVehicleRequest($vin, $contract, $locale, $brand, $fromday, $today);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchEcoevaluationPerDayByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $fromday Start day. Format : yyyyMMdd (required)
     * @param  string $today End day. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchEcoevaluationPerDayByVehicleRequest($vin, $contract, $locale, $brand, $fromday, $today)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchEcoevaluationPerDayByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchEcoevaluationPerDayByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchEcoevaluationPerDayByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchEcoevaluationPerDayByVehicle'
            );
        }
        // verify the required parameter 'fromday' is set
        if ($fromday === null || (is_array($fromday) && count($fromday) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $fromday when calling fetchEcoevaluationPerDayByVehicle'
            );
        }
        // verify the required parameter 'today' is set
        if ($today === null || (is_array($today) && count($today) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $today when calling fetchEcoevaluationPerDayByVehicle'
            );
        }

        $resourcePath = '/ecodriving/evaluation/trip/day/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($fromday !== null) {
            $queryParams['fromday'] = ObjectSerializer::toQueryValue($fromday);
        }
        // query params
        if ($today !== null) {
            $queryParams['today'] = ObjectSerializer::toQueryValue($today);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchEcoevaluationPerDaytripsByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $day Day of the evaluation. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2004[]
     */
    public function fetchEcoevaluationPerDaytripsByVehicle($vin, $contract, $locale, $brand, $day)
    {
        list($response) = $this->fetchEcoevaluationPerDaytripsByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $day);
        return $response;
    }

    /**
     * Operation fetchEcoevaluationPerDaytripsByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $day Day of the evaluation. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2004[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchEcoevaluationPerDaytripsByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $day)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2004[]';
        $request = $this->fetchEcoevaluationPerDaytripsByVehicleRequest($vin, $contract, $locale, $brand, $day);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2004[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchEcoevaluationPerDaytripsByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $day Day of the evaluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationPerDaytripsByVehicleAsync($vin, $contract, $locale, $brand, $day)
    {
        return $this->fetchEcoevaluationPerDaytripsByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $day)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchEcoevaluationPerDaytripsByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $day Day of the evaluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationPerDaytripsByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $day)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2004[]';
        $request = $this->fetchEcoevaluationPerDaytripsByVehicleRequest($vin, $contract, $locale, $brand, $day);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchEcoevaluationPerDaytripsByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $day Day of the evaluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchEcoevaluationPerDaytripsByVehicleRequest($vin, $contract, $locale, $brand, $day)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchEcoevaluationPerDaytripsByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchEcoevaluationPerDaytripsByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchEcoevaluationPerDaytripsByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchEcoevaluationPerDaytripsByVehicle'
            );
        }
        // verify the required parameter 'day' is set
        if ($day === null || (is_array($day) && count($day) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $day when calling fetchEcoevaluationPerDaytripsByVehicle'
            );
        }

        $resourcePath = '/ecodriving/evaluation/daytrips/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchEcoevaluationPerMonthByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2003[]
     */
    public function fetchEcoevaluationPerMonthByVehicle($vin, $contract, $locale, $brand, $frommonth, $tomonth)
    {
        list($response) = $this->fetchEcoevaluationPerMonthByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $frommonth, $tomonth);
        return $response;
    }

    /**
     * Operation fetchEcoevaluationPerMonthByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2003[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchEcoevaluationPerMonthByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $frommonth, $tomonth)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchEcoevaluationPerMonthByVehicleRequest($vin, $contract, $locale, $brand, $frommonth, $tomonth);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2003[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchEcoevaluationPerMonthByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationPerMonthByVehicleAsync($vin, $contract, $locale, $brand, $frommonth, $tomonth)
    {
        return $this->fetchEcoevaluationPerMonthByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $frommonth, $tomonth)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchEcoevaluationPerMonthByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEcoevaluationPerMonthByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $frommonth, $tomonth)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2003[]';
        $request = $this->fetchEcoevaluationPerMonthByVehicleRequest($vin, $contract, $locale, $brand, $frommonth, $tomonth);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchEcoevaluationPerMonthByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $frommonth Start month. Format: yyyyMM (required)
     * @param  string $tomonth End month. Format: yyyyMM (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchEcoevaluationPerMonthByVehicleRequest($vin, $contract, $locale, $brand, $frommonth, $tomonth)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchEcoevaluationPerMonthByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchEcoevaluationPerMonthByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchEcoevaluationPerMonthByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchEcoevaluationPerMonthByVehicle'
            );
        }
        // verify the required parameter 'frommonth' is set
        if ($frommonth === null || (is_array($frommonth) && count($frommonth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $frommonth when calling fetchEcoevaluationPerMonthByVehicle'
            );
        }
        // verify the required parameter 'tomonth' is set
        if ($tomonth === null || (is_array($tomonth) && count($tomonth) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tomonth when calling fetchEcoevaluationPerMonthByVehicle'
            );
        }

        $resourcePath = '/ecodriving/evaluation/trip/month/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($frommonth !== null) {
            $queryParams['frommonth'] = ObjectSerializer::toQueryValue($frommonth);
        }
        // query params
        if ($tomonth !== null) {
            $queryParams['tomonth'] = ObjectSerializer::toQueryValue($tomonth);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchEnvironmentDataByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2005
     */
    public function fetchEnvironmentDataByVehicle($vin, $contract, $listsecond)
    {
        list($response) = $this->fetchEnvironmentDataByVehicleWithHttpInfo($vin, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchEnvironmentDataByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2005, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchEnvironmentDataByVehicleWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2005';
        $request = $this->fetchEnvironmentDataByVehicleRequest($vin, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2005',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchEnvironmentDataByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEnvironmentDataByVehicleAsync($vin, $contract, $listsecond)
    {
        return $this->fetchEnvironmentDataByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchEnvironmentDataByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchEnvironmentDataByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2005';
        $request = $this->fetchEnvironmentDataByVehicleRequest($vin, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchEnvironmentDataByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchEnvironmentDataByVehicleRequest($vin, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchEnvironmentDataByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchEnvironmentDataByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchEnvironmentDataByVehicle'
            );
        }

        $resourcePath = '/environment/get/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchFuelPriceReferenceByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20018
     */
    public function fetchFuelPriceReferenceByVehicle($vin, $contract)
    {
        list($response) = $this->fetchFuelPriceReferenceByVehicleWithHttpInfo($vin, $contract);
        return $response;
    }

    /**
     * Operation fetchFuelPriceReferenceByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20018, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchFuelPriceReferenceByVehicleWithHttpInfo($vin, $contract)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20018';
        $request = $this->fetchFuelPriceReferenceByVehicleRequest($vin, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20018',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchFuelPriceReferenceByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchFuelPriceReferenceByVehicleAsync($vin, $contract)
    {
        return $this->fetchFuelPriceReferenceByVehicleAsyncWithHttpInfo($vin, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchFuelPriceReferenceByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchFuelPriceReferenceByVehicleAsyncWithHttpInfo($vin, $contract)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20018';
        $request = $this->fetchFuelPriceReferenceByVehicleRequest($vin, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchFuelPriceReferenceByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchFuelPriceReferenceByVehicleRequest($vin, $contract)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchFuelPriceReferenceByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchFuelPriceReferenceByVehicle'
            );
        }

        $resourcePath = '/trip/get/reference/fuelprice/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchLastDrivingAssistanceByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20014
     */
    public function fetchLastDrivingAssistanceByVehicle($vin, $contract, $listsecond)
    {
        list($response) = $this->fetchLastDrivingAssistanceByVehicleWithHttpInfo($vin, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchLastDrivingAssistanceByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLastDrivingAssistanceByVehicleWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20014';
        $request = $this->fetchLastDrivingAssistanceByVehicleRequest($vin, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchLastDrivingAssistanceByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastDrivingAssistanceByVehicleAsync($vin, $contract, $listsecond)
    {
        return $this->fetchLastDrivingAssistanceByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchLastDrivingAssistanceByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastDrivingAssistanceByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20014';
        $request = $this->fetchLastDrivingAssistanceByVehicleRequest($vin, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchLastDrivingAssistanceByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchLastDrivingAssistanceByVehicleRequest($vin, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchLastDrivingAssistanceByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchLastDrivingAssistanceByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchLastDrivingAssistanceByVehicle'
            );
        }

        $resourcePath = '/safety/drivingassistance/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchLastPositionByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2009
     */
    public function fetchLastPositionByVehicle($vin, $near, $contract, $listsecond)
    {
        list($response) = $this->fetchLastPositionByVehicleWithHttpInfo($vin, $near, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchLastPositionByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2009, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLastPositionByVehicleWithHttpInfo($vin, $near, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2009';
        $request = $this->fetchLastPositionByVehicleRequest($vin, $near, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2009',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchLastPositionByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastPositionByVehicleAsync($vin, $near, $contract, $listsecond)
    {
        return $this->fetchLastPositionByVehicleAsyncWithHttpInfo($vin, $near, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchLastPositionByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastPositionByVehicleAsyncWithHttpInfo($vin, $near, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2009';
        $request = $this->fetchLastPositionByVehicleRequest($vin, $near, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchLastPositionByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchLastPositionByVehicleRequest($vin, $near, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchLastPositionByVehicle'
            );
        }
        // verify the required parameter 'near' is set
        if ($near === null || (is_array($near) && count($near) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $near when calling fetchLastPositionByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchLastPositionByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchLastPositionByVehicle'
            );
        }

        $resourcePath = '/place/lastposition/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($near !== null) {
            $queryParams['near'] = ObjectSerializer::toQueryValue($near);
        }
        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchLastSafetyAssistanceByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20015
     */
    public function fetchLastSafetyAssistanceByVehicle($vin, $contract, $listsecond)
    {
        list($response) = $this->fetchLastSafetyAssistanceByVehicleWithHttpInfo($vin, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchLastSafetyAssistanceByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLastSafetyAssistanceByVehicleWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20015';
        $request = $this->fetchLastSafetyAssistanceByVehicleRequest($vin, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchLastSafetyAssistanceByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastSafetyAssistanceByVehicleAsync($vin, $contract, $listsecond)
    {
        return $this->fetchLastSafetyAssistanceByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchLastSafetyAssistanceByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastSafetyAssistanceByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20015';
        $request = $this->fetchLastSafetyAssistanceByVehicleRequest($vin, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchLastSafetyAssistanceByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchLastSafetyAssistanceByVehicleRequest($vin, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchLastSafetyAssistanceByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchLastSafetyAssistanceByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchLastSafetyAssistanceByVehicle'
            );
        }

        $resourcePath = '/safety/safetyassistance/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchLastTripEcoevaluationByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2004
     */
    public function fetchLastTripEcoevaluationByVehicle($vin, $contract, $locale, $brand)
    {
        list($response) = $this->fetchLastTripEcoevaluationByVehicleWithHttpInfo($vin, $contract, $locale, $brand);
        return $response;
    }

    /**
     * Operation fetchLastTripEcoevaluationByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2004, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLastTripEcoevaluationByVehicleWithHttpInfo($vin, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2004';
        $request = $this->fetchLastTripEcoevaluationByVehicleRequest($vin, $contract, $locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2004',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchLastTripEcoevaluationByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastTripEcoevaluationByVehicleAsync($vin, $contract, $locale, $brand)
    {
        return $this->fetchLastTripEcoevaluationByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchLastTripEcoevaluationByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastTripEcoevaluationByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2004';
        $request = $this->fetchLastTripEcoevaluationByVehicleRequest($vin, $contract, $locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchLastTripEcoevaluationByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchLastTripEcoevaluationByVehicleRequest($vin, $contract, $locale, $brand)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchLastTripEcoevaluationByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchLastTripEcoevaluationByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchLastTripEcoevaluationByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchLastTripEcoevaluationByVehicle'
            );
        }

        $resourcePath = '/ecodriving/evaluation/lasttrip/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchLastTripsByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $limit Maximum number of lines to retrieve (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20017
     */
    public function fetchLastTripsByVehicle($vin, $contract, $limit, $unit)
    {
        list($response) = $this->fetchLastTripsByVehicleWithHttpInfo($vin, $contract, $limit, $unit);
        return $response;
    }

    /**
     * Operation fetchLastTripsByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $limit Maximum number of lines to retrieve (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLastTripsByVehicleWithHttpInfo($vin, $contract, $limit, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20017';
        $request = $this->fetchLastTripsByVehicleRequest($vin, $contract, $limit, $unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchLastTripsByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $limit Maximum number of lines to retrieve (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastTripsByVehicleAsync($vin, $contract, $limit, $unit)
    {
        return $this->fetchLastTripsByVehicleAsyncWithHttpInfo($vin, $contract, $limit, $unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchLastTripsByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $limit Maximum number of lines to retrieve (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLastTripsByVehicleAsyncWithHttpInfo($vin, $contract, $limit, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20017';
        $request = $this->fetchLastTripsByVehicleRequest($vin, $contract, $limit, $unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchLastTripsByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $limit Maximum number of lines to retrieve (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchLastTripsByVehicleRequest($vin, $contract, $limit, $unit)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchLastTripsByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchLastTripsByVehicle'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling fetchLastTripsByVehicle'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling fetchLastTripsByVehicle'
            );
        }

        $resourcePath = '/trip/last/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = ObjectSerializer::toQueryValue($unit);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchLightStatusByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20012
     */
    public function fetchLightStatusByVehicle($vin, $contract, $listsecond)
    {
        list($response) = $this->fetchLightStatusByVehicleWithHttpInfo($vin, $contract, $listsecond);
        return $response;
    }

    /**
     * Operation fetchLightStatusByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20012, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchLightStatusByVehicleWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20012';
        $request = $this->fetchLightStatusByVehicleRequest($vin, $contract, $listsecond);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20012',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchLightStatusByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLightStatusByVehicleAsync($vin, $contract, $listsecond)
    {
        return $this->fetchLightStatusByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchLightStatusByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchLightStatusByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20012';
        $request = $this->fetchLightStatusByVehicleRequest($vin, $contract, $listsecond);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchLightStatusByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchLightStatusByVehicleRequest($vin, $contract, $listsecond)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchLightStatusByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchLightStatusByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchLightStatusByVehicle'
            );
        }

        $resourcePath = '/running/data/lightstatus/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchMaintenanceAlertByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2008
     */
    public function fetchMaintenanceAlertByVehicle($vin, $contract, $locale, $brand, $active)
    {
        list($response) = $this->fetchMaintenanceAlertByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $active);
        return $response;
    }

    /**
     * Operation fetchMaintenanceAlertByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2008, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchMaintenanceAlertByVehicleWithHttpInfo($vin, $contract, $locale, $brand, $active)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2008';
        $request = $this->fetchMaintenanceAlertByVehicleRequest($vin, $contract, $locale, $brand, $active);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2008',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchMaintenanceAlertByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchMaintenanceAlertByVehicleAsync($vin, $contract, $locale, $brand, $active)
    {
        return $this->fetchMaintenanceAlertByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $active)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchMaintenanceAlertByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchMaintenanceAlertByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand, $active)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2008';
        $request = $this->fetchMaintenanceAlertByVehicleRequest($vin, $contract, $locale, $brand, $active);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchMaintenanceAlertByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     * @param  string $active Used to seek an active alarm. 0 &#x3D; inactive, 1 &#x3D; active. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchMaintenanceAlertByVehicleRequest($vin, $contract, $locale, $brand, $active)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchMaintenanceAlertByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchMaintenanceAlertByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchMaintenanceAlertByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchMaintenanceAlertByVehicle'
            );
        }
        // verify the required parameter 'active' is set
        if ($active === null || (is_array($active) && count($active) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $active when calling fetchMaintenanceAlertByVehicle'
            );
        }

        $resourcePath = '/maintenance/alert/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }
        // query params
        if ($active !== null) {
            $queryParams['active'] = ObjectSerializer::toQueryValue($active);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchMaintenanceDataByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2006
     */
    public function fetchMaintenanceDataByVehicle($vin, $contract, $locale, $brand)
    {
        list($response) = $this->fetchMaintenanceDataByVehicleWithHttpInfo($vin, $contract, $locale, $brand);
        return $response;
    }

    /**
     * Operation fetchMaintenanceDataByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2006, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchMaintenanceDataByVehicleWithHttpInfo($vin, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2006';
        $request = $this->fetchMaintenanceDataByVehicleRequest($vin, $contract, $locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2006',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchMaintenanceDataByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchMaintenanceDataByVehicleAsync($vin, $contract, $locale, $brand)
    {
        return $this->fetchMaintenanceDataByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchMaintenanceDataByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchMaintenanceDataByVehicleAsyncWithHttpInfo($vin, $contract, $locale, $brand)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2006';
        $request = $this->fetchMaintenanceDataByVehicleRequest($vin, $contract, $locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchMaintenanceDataByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $locale Locale. For example : fr_FR for french (required)
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchMaintenanceDataByVehicleRequest($vin, $contract, $locale, $brand)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchMaintenanceDataByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchMaintenanceDataByVehicle'
            );
        }
        // verify the required parameter 'locale' is set
        if ($locale === null || (is_array($locale) && count($locale) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $locale when calling fetchMaintenanceDataByVehicle'
            );
        }
        // verify the required parameter 'brand' is set
        if ($brand === null || (is_array($brand) && count($brand) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $brand when calling fetchMaintenanceDataByVehicle'
            );
        }

        $resourcePath = '/maintenance/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchMaintenanceReferential
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20010[]
     */
    public function fetchMaintenanceReferential($locale = '', $brand = '')
    {
        list($response) = $this->fetchMaintenanceReferentialWithHttpInfo($locale, $brand);
        return $response;
    }

    /**
     * Operation fetchMaintenanceReferentialWithHttpInfo
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20010[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchMaintenanceReferentialWithHttpInfo($locale = '', $brand = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20010[]';
        $request = $this->fetchMaintenanceReferentialRequest($locale, $brand);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20010[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchMaintenanceReferentialAsync
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchMaintenanceReferentialAsync($locale = '', $brand = '')
    {
        return $this->fetchMaintenanceReferentialAsyncWithHttpInfo($locale, $brand)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchMaintenanceReferentialAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchMaintenanceReferentialAsyncWithHttpInfo($locale = '', $brand = '')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20010[]';
        $request = $this->fetchMaintenanceReferentialRequest($locale, $brand);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchMaintenanceReferential'
     *
     * @param  string $locale Locale. For example : fr_FR for french (optional, default to )
     * @param  string $brand Brand of the vehicle : C for Citroën or DS, P for Peugeot (optional, default to )
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchMaintenanceReferentialRequest($locale = '', $brand = '')
    {

        $resourcePath = '/referential/maintenance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($locale !== null) {
            $queryParams['locale'] = ObjectSerializer::toQueryValue($locale);
        }
        // query params
        if ($brand !== null) {
            $queryParams['brand'] = ObjectSerializer::toQueryValue($brand);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchPictureByVehicleAndContract
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body10 $body Picture settings (required)
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fetchPictureByVehicleAndContract($body, $vin, $contract)
    {
        $this->fetchPictureByVehicleAndContractWithHttpInfo($body, $vin, $contract);
    }

    /**
     * Operation fetchPictureByVehicleAndContractWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body10 $body Picture settings (required)
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchPictureByVehicleAndContractWithHttpInfo($body, $vin, $contract)
    {
        $returnType = '';
        $request = $this->fetchPictureByVehicleAndContractRequest($body, $vin, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation fetchPictureByVehicleAndContractAsync
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body10 $body Picture settings (required)
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchPictureByVehicleAndContractAsync($body, $vin, $contract)
    {
        return $this->fetchPictureByVehicleAndContractAsyncWithHttpInfo($body, $vin, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchPictureByVehicleAndContractAsyncWithHttpInfo
     *
     * 
     *
     * @param  \Psa\ConnectedCar\Model\Body10 $body Picture settings (required)
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchPictureByVehicleAndContractAsyncWithHttpInfo($body, $vin, $contract)
    {
        $returnType = '';
        $request = $this->fetchPictureByVehicleAndContractRequest($body, $vin, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchPictureByVehicleAndContract'
     *
     * @param  \Psa\ConnectedCar\Model\Body10 $body Picture settings (required)
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchPictureByVehicleAndContractRequest($body, $vin, $contract)
    {
        // verify the required parameter 'body' is set
        if ($body === null || (is_array($body) && count($body) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $body when calling fetchPictureByVehicleAndContract'
            );
        }
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchPictureByVehicleAndContract'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchPictureByVehicleAndContract'
            );
        }

        $resourcePath = '/vehicle/picture/{vin}/{contract}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchPictureByVehicleAndContract2
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function fetchPictureByVehicleAndContract2($vin, $contract)
    {
        $this->fetchPictureByVehicleAndContract2WithHttpInfo($vin, $contract);
    }

    /**
     * Operation fetchPictureByVehicleAndContract2WithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchPictureByVehicleAndContract2WithHttpInfo($vin, $contract)
    {
        $returnType = '';
        $request = $this->fetchPictureByVehicleAndContract2Request($vin, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation fetchPictureByVehicleAndContract2Async
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchPictureByVehicleAndContract2Async($vin, $contract)
    {
        return $this->fetchPictureByVehicleAndContract2AsyncWithHttpInfo($vin, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchPictureByVehicleAndContract2AsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchPictureByVehicleAndContract2AsyncWithHttpInfo($vin, $contract)
    {
        $returnType = '';
        $request = $this->fetchPictureByVehicleAndContract2Request($vin, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchPictureByVehicleAndContract2'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchPictureByVehicleAndContract2Request($vin, $contract)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchPictureByVehicleAndContract2'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchPictureByVehicleAndContract2'
            );
        }

        $resourcePath = '/vehicle/picture/{vin}/{contract}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }
        // path params
        if ($contract !== null) {
            $resourcePath = str_replace(
                '{' . 'contract' . '}',
                ObjectSerializer::toPathValue($contract),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchPositionPerTripByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $tripid Trip&#39;s id. You can retreive th id of a trip calling the _trip_ operation (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2009[]
     */
    public function fetchPositionPerTripByVehicle($vin, $contract, $listsecond, $near, $tripid)
    {
        list($response) = $this->fetchPositionPerTripByVehicleWithHttpInfo($vin, $contract, $listsecond, $near, $tripid);
        return $response;
    }

    /**
     * Operation fetchPositionPerTripByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $tripid Trip&#39;s id. You can retreive th id of a trip calling the _trip_ operation (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2009[], HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchPositionPerTripByVehicleWithHttpInfo($vin, $contract, $listsecond, $near, $tripid)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2009[]';
        $request = $this->fetchPositionPerTripByVehicleRequest($vin, $contract, $listsecond, $near, $tripid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2009[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchPositionPerTripByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $tripid Trip&#39;s id. You can retreive th id of a trip calling the _trip_ operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchPositionPerTripByVehicleAsync($vin, $contract, $listsecond, $near, $tripid)
    {
        return $this->fetchPositionPerTripByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond, $near, $tripid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchPositionPerTripByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $tripid Trip&#39;s id. You can retreive th id of a trip calling the _trip_ operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchPositionPerTripByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond, $near, $tripid)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2009[]';
        $request = $this->fetchPositionPerTripByVehicleRequest($vin, $contract, $listsecond, $near, $tripid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchPositionPerTripByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $near Only for the geolocation service. The position of the car is sampled at 0.17 Hz (every 10s). With near set to 1 , if you request a second where there is no data the API will give you the next non null value. (required)
     * @param  string $tripid Trip&#39;s id. You can retreive th id of a trip calling the _trip_ operation (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchPositionPerTripByVehicleRequest($vin, $contract, $listsecond, $near, $tripid)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchPositionPerTripByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchPositionPerTripByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling fetchPositionPerTripByVehicle'
            );
        }
        // verify the required parameter 'near' is set
        if ($near === null || (is_array($near) && count($near) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $near when calling fetchPositionPerTripByVehicle'
            );
        }
        // verify the required parameter 'tripid' is set
        if ($tripid === null || (is_array($tripid) && count($tripid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tripid when calling fetchPositionPerTripByVehicle'
            );
        }

        $resourcePath = '/place/positions/trip/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }
        // query params
        if ($near !== null) {
            $queryParams['near'] = ObjectSerializer::toQueryValue($near);
        }
        // query params
        if ($tripid !== null) {
            $queryParams['tripid'] = ObjectSerializer::toQueryValue($tripid);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchReferenceTripByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20016
     */
    public function fetchReferenceTripByVehicle($vin, $contract, $unit)
    {
        list($response) = $this->fetchReferenceTripByVehicleWithHttpInfo($vin, $contract, $unit);
        return $response;
    }

    /**
     * Operation fetchReferenceTripByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20016, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchReferenceTripByVehicleWithHttpInfo($vin, $contract, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20016';
        $request = $this->fetchReferenceTripByVehicleRequest($vin, $contract, $unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20016',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchReferenceTripByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchReferenceTripByVehicleAsync($vin, $contract, $unit)
    {
        return $this->fetchReferenceTripByVehicleAsyncWithHttpInfo($vin, $contract, $unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchReferenceTripByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchReferenceTripByVehicleAsyncWithHttpInfo($vin, $contract, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20016';
        $request = $this->fetchReferenceTripByVehicleRequest($vin, $contract, $unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchReferenceTripByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchReferenceTripByVehicleRequest($vin, $contract, $unit)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchReferenceTripByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchReferenceTripByVehicle'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling fetchReferenceTripByVehicle'
            );
        }

        $resourcePath = '/trip/get/referencetrip/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = ObjectSerializer::toQueryValue($unit);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchTripByVehicleAndTrip
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20016Trips
     */
    public function fetchTripByVehicleAndTrip($vin, $contract, $tripid, $unit)
    {
        list($response) = $this->fetchTripByVehicleAndTripWithHttpInfo($vin, $contract, $tripid, $unit);
        return $response;
    }

    /**
     * Operation fetchTripByVehicleAndTripWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20016Trips, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchTripByVehicleAndTripWithHttpInfo($vin, $contract, $tripid, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20016Trips';
        $request = $this->fetchTripByVehicleAndTripRequest($vin, $contract, $tripid, $unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20016Trips',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchTripByVehicleAndTripAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchTripByVehicleAndTripAsync($vin, $contract, $tripid, $unit)
    {
        return $this->fetchTripByVehicleAndTripAsyncWithHttpInfo($vin, $contract, $tripid, $unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchTripByVehicleAndTripAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchTripByVehicleAndTripAsyncWithHttpInfo($vin, $contract, $tripid, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20016Trips';
        $request = $this->fetchTripByVehicleAndTripRequest($vin, $contract, $tripid, $unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchTripByVehicleAndTrip'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchTripByVehicleAndTripRequest($vin, $contract, $tripid, $unit)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchTripByVehicleAndTrip'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchTripByVehicleAndTrip'
            );
        }
        // verify the required parameter 'tripid' is set
        if ($tripid === null || (is_array($tripid) && count($tripid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tripid when calling fetchTripByVehicleAndTrip'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling fetchTripByVehicleAndTrip'
            );
        }

        $resourcePath = '/trip/id/{vin}/{tripid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = ObjectSerializer::toQueryValue($unit);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }
        // path params
        if ($tripid !== null) {
            $resourcePath = str_replace(
                '{' . 'tripid' . '}',
                ObjectSerializer::toPathValue($tripid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchTripPerPeridByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20017
     */
    public function fetchTripPerPeridByVehicle($vin, $contract, $from, $to, $limit, $unit)
    {
        list($response) = $this->fetchTripPerPeridByVehicleWithHttpInfo($vin, $contract, $from, $to, $limit, $unit);
        return $response;
    }

    /**
     * Operation fetchTripPerPeridByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20017, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchTripPerPeridByVehicleWithHttpInfo($vin, $contract, $from, $to, $limit, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20017';
        $request = $this->fetchTripPerPeridByVehicleRequest($vin, $contract, $from, $to, $limit, $unit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20017',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchTripPerPeridByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchTripPerPeridByVehicleAsync($vin, $contract, $from, $to, $limit, $unit)
    {
        return $this->fetchTripPerPeridByVehicleAsyncWithHttpInfo($vin, $contract, $from, $to, $limit, $unit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchTripPerPeridByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchTripPerPeridByVehicleAsyncWithHttpInfo($vin, $contract, $from, $to, $limit, $unit)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20017';
        $request = $this->fetchTripPerPeridByVehicleRequest($vin, $contract, $from, $to, $limit, $unit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchTripPerPeridByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start day. Format : yyyyMMdd (required)
     * @param  string $to End day. Format : yyyyMMdd (required)
     * @param  string $limit Maximum number of lines to retrieve. 10 by default (required)
     * @param  string $unit Unit for this trip : 0 for metric system, 1 for imperial system (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchTripPerPeridByVehicleRequest($vin, $contract, $from, $to, $limit, $unit)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchTripPerPeridByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchTripPerPeridByVehicle'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling fetchTripPerPeridByVehicle'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling fetchTripPerPeridByVehicle'
            );
        }
        // verify the required parameter 'limit' is set
        if ($limit === null || (is_array($limit) && count($limit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $limit when calling fetchTripPerPeridByVehicle'
            );
        }
        // verify the required parameter 'unit' is set
        if ($unit === null || (is_array($unit) && count($unit) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $unit when calling fetchTripPerPeridByVehicle'
            );
        }

        $resourcePath = '/trip/period/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($unit !== null) {
            $queryParams['unit'] = ObjectSerializer::toQueryValue($unit);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation fetchVehicleInformationByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20019
     */
    public function fetchVehicleInformationByVehicle($vin, $contract)
    {
        list($response) = $this->fetchVehicleInformationByVehicleWithHttpInfo($vin, $contract);
        return $response;
    }

    /**
     * Operation fetchVehicleInformationByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20019, HTTP status code, HTTP response headers (array of strings)
     */
    public function fetchVehicleInformationByVehicleWithHttpInfo($vin, $contract)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20019';
        $request = $this->fetchVehicleInformationByVehicleRequest($vin, $contract);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20019',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation fetchVehicleInformationByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchVehicleInformationByVehicleAsync($vin, $contract)
    {
        return $this->fetchVehicleInformationByVehicleAsyncWithHttpInfo($vin, $contract)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation fetchVehicleInformationByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function fetchVehicleInformationByVehicleAsyncWithHttpInfo($vin, $contract)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20019';
        $request = $this->fetchVehicleInformationByVehicleRequest($vin, $contract);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'fetchVehicleInformationByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function fetchVehicleInformationByVehicleRequest($vin, $contract)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling fetchVehicleInformationByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling fetchVehicleInformationByVehicle'
            );
        }

        $resourcePath = '/vehicle/information/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchCrashByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start date. Format : yyyyMMddHHmm (required)
     * @param  string $to End date. Format : yyyyMMddHHmm (required)
     * @param  string $limit Number of lines to retrieve (optional, default to 10)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse2001[]
     */
    public function searchCrashByVehicle($vin, $contract, $from, $to, $limit = '10')
    {
        list($response) = $this->searchCrashByVehicleWithHttpInfo($vin, $contract, $from, $to, $limit);
        return $response;
    }

    /**
     * Operation searchCrashByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start date. Format : yyyyMMddHHmm (required)
     * @param  string $to End date. Format : yyyyMMddHHmm (required)
     * @param  string $limit Number of lines to retrieve (optional, default to 10)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse2001[], HTTP status code, HTTP response headers (array of strings)
     */
    public function searchCrashByVehicleWithHttpInfo($vin, $contract, $from, $to, $limit = '10')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2001[]';
        $request = $this->searchCrashByVehicleRequest($vin, $contract, $from, $to, $limit);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse2001[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchCrashByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start date. Format : yyyyMMddHHmm (required)
     * @param  string $to End date. Format : yyyyMMddHHmm (required)
     * @param  string $limit Number of lines to retrieve (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCrashByVehicleAsync($vin, $contract, $from, $to, $limit = '10')
    {
        return $this->searchCrashByVehicleAsyncWithHttpInfo($vin, $contract, $from, $to, $limit)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchCrashByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start date. Format : yyyyMMddHHmm (required)
     * @param  string $to End date. Format : yyyyMMddHHmm (required)
     * @param  string $limit Number of lines to retrieve (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchCrashByVehicleAsyncWithHttpInfo($vin, $contract, $from, $to, $limit = '10')
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse2001[]';
        $request = $this->searchCrashByVehicleRequest($vin, $contract, $from, $to, $limit);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchCrashByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $from Start date. Format : yyyyMMddHHmm (required)
     * @param  string $to End date. Format : yyyyMMddHHmm (required)
     * @param  string $limit Number of lines to retrieve (optional, default to 10)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchCrashByVehicleRequest($vin, $contract, $from, $to, $limit = '10')
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling searchCrashByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling searchCrashByVehicle'
            );
        }
        // verify the required parameter 'from' is set
        if ($from === null || (is_array($from) && count($from) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $from when calling searchCrashByVehicle'
            );
        }
        // verify the required parameter 'to' is set
        if ($to === null || (is_array($to) && count($to) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $to when calling searchCrashByVehicle'
            );
        }

        $resourcePath = '/crash/search/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($from !== null) {
            $queryParams['from'] = ObjectSerializer::toQueryValue($from);
        }
        // query params
        if ($to !== null) {
            $queryParams['to'] = ObjectSerializer::toQueryValue($to);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchDrivingAssistancePerDayByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20014
     */
    public function searchDrivingAssistancePerDayByVehicle($vin, $contract, $listsecond, $day)
    {
        list($response) = $this->searchDrivingAssistancePerDayByVehicleWithHttpInfo($vin, $contract, $listsecond, $day);
        return $response;
    }

    /**
     * Operation searchDrivingAssistancePerDayByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20014, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchDrivingAssistancePerDayByVehicleWithHttpInfo($vin, $contract, $listsecond, $day)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20014';
        $request = $this->searchDrivingAssistancePerDayByVehicleRequest($vin, $contract, $listsecond, $day);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20014',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchDrivingAssistancePerDayByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDrivingAssistancePerDayByVehicleAsync($vin, $contract, $listsecond, $day)
    {
        return $this->searchDrivingAssistancePerDayByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond, $day)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchDrivingAssistancePerDayByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchDrivingAssistancePerDayByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond, $day)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20014';
        $request = $this->searchDrivingAssistancePerDayByVehicleRequest($vin, $contract, $listsecond, $day);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchDrivingAssistancePerDayByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchDrivingAssistancePerDayByVehicleRequest($vin, $contract, $listsecond, $day)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling searchDrivingAssistancePerDayByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling searchDrivingAssistancePerDayByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling searchDrivingAssistancePerDayByVehicle'
            );
        }
        // verify the required parameter 'day' is set
        if ($day === null || (is_array($day) && count($day) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $day when calling searchDrivingAssistancePerDayByVehicle'
            );
        }

        $resourcePath = '/safety/search/drivingassistance/day/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation searchSafetyAssistancePerDayByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Psa\ConnectedCar\Model\InlineResponse20015
     */
    public function searchSafetyAssistancePerDayByVehicle($vin, $contract, $listsecond, $day)
    {
        list($response) = $this->searchSafetyAssistancePerDayByVehicleWithHttpInfo($vin, $contract, $listsecond, $day);
        return $response;
    }

    /**
     * Operation searchSafetyAssistancePerDayByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Psa\ConnectedCar\Model\InlineResponse20015, HTTP status code, HTTP response headers (array of strings)
     */
    public function searchSafetyAssistancePerDayByVehicleWithHttpInfo($vin, $contract, $listsecond, $day)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20015';
        $request = $this->searchSafetyAssistancePerDayByVehicleRequest($vin, $contract, $listsecond, $day);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Psa\ConnectedCar\Model\InlineResponse20015',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation searchSafetyAssistancePerDayByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSafetyAssistancePerDayByVehicleAsync($vin, $contract, $listsecond, $day)
    {
        return $this->searchSafetyAssistancePerDayByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond, $day)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation searchSafetyAssistancePerDayByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function searchSafetyAssistancePerDayByVehicleAsyncWithHttpInfo($vin, $contract, $listsecond, $day)
    {
        $returnType = '\Psa\ConnectedCar\Model\InlineResponse20015';
        $request = $this->searchSafetyAssistancePerDayByVehicleRequest($vin, $contract, $listsecond, $day);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'searchSafetyAssistancePerDayByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $listsecond Comma separated list of seconds to retrieve. Ex: 1,2,3 (required)
     * @param  string $day Day of the eveluation. Format : yyyyMMdd (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function searchSafetyAssistancePerDayByVehicleRequest($vin, $contract, $listsecond, $day)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling searchSafetyAssistancePerDayByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling searchSafetyAssistancePerDayByVehicle'
            );
        }
        // verify the required parameter 'listsecond' is set
        if ($listsecond === null || (is_array($listsecond) && count($listsecond) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $listsecond when calling searchSafetyAssistancePerDayByVehicle'
            );
        }
        // verify the required parameter 'day' is set
        if ($day === null || (is_array($day) && count($day) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $day when calling searchSafetyAssistancePerDayByVehicle'
            );
        }

        $resourcePath = '/safety/search/safetyassistance/day/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($listsecond !== null) {
            $queryParams['listsecond'] = ObjectSerializer::toQueryValue($listsecond);
        }
        // query params
        if ($day !== null) {
            $queryParams['day'] = ObjectSerializer::toQueryValue($day);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFuelPriceForTripByVehicleAndTrip
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateFuelPriceForTripByVehicleAndTrip($vin, $tripid, $contract, $price)
    {
        $this->updateFuelPriceForTripByVehicleAndTripWithHttpInfo($vin, $tripid, $contract, $price);
    }

    /**
     * Operation updateFuelPriceForTripByVehicleAndTripWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFuelPriceForTripByVehicleAndTripWithHttpInfo($vin, $tripid, $contract, $price)
    {
        $returnType = '';
        $request = $this->updateFuelPriceForTripByVehicleAndTripRequest($vin, $tripid, $contract, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateFuelPriceForTripByVehicleAndTripAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFuelPriceForTripByVehicleAndTripAsync($vin, $tripid, $contract, $price)
    {
        return $this->updateFuelPriceForTripByVehicleAndTripAsyncWithHttpInfo($vin, $tripid, $contract, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFuelPriceForTripByVehicleAndTripAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFuelPriceForTripByVehicleAndTripAsyncWithHttpInfo($vin, $tripid, $contract, $price)
    {
        $returnType = '';
        $request = $this->updateFuelPriceForTripByVehicleAndTripRequest($vin, $tripid, $contract, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFuelPriceForTripByVehicleAndTrip'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $tripid ID of the trip (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateFuelPriceForTripByVehicleAndTripRequest($vin, $tripid, $contract, $price)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling updateFuelPriceForTripByVehicleAndTrip'
            );
        }
        // verify the required parameter 'tripid' is set
        if ($tripid === null || (is_array($tripid) && count($tripid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tripid when calling updateFuelPriceForTripByVehicleAndTrip'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling updateFuelPriceForTripByVehicleAndTrip'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling updateFuelPriceForTripByVehicleAndTrip'
            );
        }

        $resourcePath = '/trip/update/fuelprice/{vin}/{tripid}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }
        // path params
        if ($tripid !== null) {
            $resourcePath = str_replace(
                '{' . 'tripid' . '}',
                ObjectSerializer::toPathValue($tripid),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateFuelPriceReferenceByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateFuelPriceReferenceByVehicle($vin, $contract, $price)
    {
        $this->updateFuelPriceReferenceByVehicleWithHttpInfo($vin, $contract, $price);
    }

    /**
     * Operation updateFuelPriceReferenceByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateFuelPriceReferenceByVehicleWithHttpInfo($vin, $contract, $price)
    {
        $returnType = '';
        $request = $this->updateFuelPriceReferenceByVehicleRequest($vin, $contract, $price);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateFuelPriceReferenceByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFuelPriceReferenceByVehicleAsync($vin, $contract, $price)
    {
        return $this->updateFuelPriceReferenceByVehicleAsyncWithHttpInfo($vin, $contract, $price)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateFuelPriceReferenceByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateFuelPriceReferenceByVehicleAsyncWithHttpInfo($vin, $contract, $price)
    {
        $returnType = '';
        $request = $this->updateFuelPriceReferenceByVehicleRequest($vin, $contract, $price);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateFuelPriceReferenceByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $price Fuel price (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateFuelPriceReferenceByVehicleRequest($vin, $contract, $price)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling updateFuelPriceReferenceByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling updateFuelPriceReferenceByVehicle'
            );
        }
        // verify the required parameter 'price' is set
        if ($price === null || (is_array($price) && count($price) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $price when calling updateFuelPriceReferenceByVehicle'
            );
        }

        $resourcePath = '/trip/update/reference/fuelprice/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($price !== null) {
            $queryParams['price'] = ObjectSerializer::toQueryValue($price);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateReferenceTripByVehicle
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function updateReferenceTripByVehicle($vin, $contract, $tripid)
    {
        $this->updateReferenceTripByVehicleWithHttpInfo($vin, $contract, $tripid);
    }

    /**
     * Operation updateReferenceTripByVehicleWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     *
     * @throws \Psa\ConnectedCar\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateReferenceTripByVehicleWithHttpInfo($vin, $contract, $tripid)
    {
        $returnType = '';
        $request = $this->updateReferenceTripByVehicleRequest($vin, $contract, $tripid);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation updateReferenceTripByVehicleAsync
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateReferenceTripByVehicleAsync($vin, $contract, $tripid)
    {
        return $this->updateReferenceTripByVehicleAsyncWithHttpInfo($vin, $contract, $tripid)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateReferenceTripByVehicleAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateReferenceTripByVehicleAsyncWithHttpInfo($vin, $contract, $tripid)
    {
        $returnType = '';
        $request = $this->updateReferenceTripByVehicleRequest($vin, $contract, $tripid);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateReferenceTripByVehicle'
     *
     * @param  string $vin Vehicle&#39;s VIN (required)
     * @param  string $contract Contract number (required)
     * @param  string $tripid ID of the trip (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateReferenceTripByVehicleRequest($vin, $contract, $tripid)
    {
        // verify the required parameter 'vin' is set
        if ($vin === null || (is_array($vin) && count($vin) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $vin when calling updateReferenceTripByVehicle'
            );
        }
        // verify the required parameter 'contract' is set
        if ($contract === null || (is_array($contract) && count($contract) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $contract when calling updateReferenceTripByVehicle'
            );
        }
        // verify the required parameter 'tripid' is set
        if ($tripid === null || (is_array($tripid) && count($tripid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $tripid when calling updateReferenceTripByVehicle'
            );
        }

        $resourcePath = '/trip/update/referencetrip/{vin}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($contract !== null) {
            $queryParams['contract'] = ObjectSerializer::toQueryValue($contract);
        }
        // query params
        if ($tripid !== null) {
            $queryParams['tripid'] = ObjectSerializer::toQueryValue($tripid);
        }

        // path params
        if ($vin !== null) {
            $resourcePath = str_replace(
                '{' . 'vin' . '}',
                ObjectSerializer::toPathValue($vin),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('client_id');
        if ($apiKey !== null) {
            $queryParams['client_id'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
